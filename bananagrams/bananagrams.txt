-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A toy Bananagrams solver
@package bananagrams
@version 0.0.1.1


-- | Bananagrams word selection
module Bananagrams.Dictionary

-- | A bag of allowed words.
data Dictionary

-- | Generates a <a>Dictionary</a> from a list of words.
newDictionary :: [Text] -> Dictionary

-- | A convenience alias for the characters in hand (to be placed on the
--   grid).
type Hand = Multiset Char

-- | Returns the best words to use first given the allowed characters.
firstWords :: Dictionary -> Hand -> [Text]

-- | Returns the words and offsets from the given dictionary and hand which
--   match the constraints and fit within the bounds.
matchingWords :: Dictionary -> Hand -> Map Int Char -> (Int, Int) -> [(Text, Int)]


-- | Bananagrams grid operations
module Bananagrams.Grid

-- | A Bananagrams grid!
data Grid s

-- | Generates a new grid of edge length <tt>2*n+1</tt>, centered around 0.
newGrid :: Int -> ST s (Grid s)

-- | A word entry inside a grid.
data Entry
Entry :: !Text -> !Orientation -> !YX -> Entry
[entryText] :: Entry -> !Text
[entryOrientation] :: Entry -> !Orientation
[entryStart] :: Entry -> !YX

-- | An entry's orientation.
data Orientation
Horizontal :: Orientation
Vertical :: Orientation

-- | The unit vector corresponding to the orientation.
orientationYX :: Orientation -> YX

-- | All entries set in the grid.
currentEntries :: Grid s -> ST s [Entry]

-- | A conflict when adding an entry.
data Conflict
Conflict :: !YX -> Char -> Maybe Char -> Conflict
[conflictYX] :: Conflict -> !YX
[conflictNewChar] :: Conflict -> Char

-- | Nothing if the position can not be populated.
[conflictOldChar] :: Conflict -> Maybe Char

-- | Attempts to add a new entry to the grid. Note that this method does
--   *not* check that a word is valid. If the word is empty or does not fit
--   in the grid, this method will <a>error</a>.
setEntry :: Entry -> Grid s -> ST s (Either Conflict (Multiset Char))

-- | Removes the last added entry, or does nothing if the grid doesn't
--   contain any entries. Returns the entry which was just unset, if any.
unsetLastEntry :: Grid s -> ST s (Multiset Char)

-- | A candidate grid location.
data Candidate
Candidate :: !YX -> !Orientation -> !Map Int Char -> !(Int, Int) -> Candidate

-- | The candidate root coordinate, always already set in the grid.
[candidateYX] :: Candidate -> !YX

-- | The orientation of the new word.
[candidateOrientation] :: Candidate -> !Orientation

-- | All set characters in this candidate row or column, indexed from the
--   root.
[candidateChars] :: Candidate -> !Map Int Char

-- | Minimum and maximum offsets for this candidate position. Note that the
--   maximum candidate word length can be inferred from these bounds (
[candidateBounds] :: Candidate -> !(Int, Int)

-- | Returns all candidate locations for adding new words to the grid. Note
--   that word expansions are not considered valid candidates (e.g.
--   <tt>T</tt> transforming <tt>CAT</tt> into <tt>CATS</tt> would not be
--   returned). The first argument is used to limit the sweep, it should be
--   set to the maximum length of the word set in these positions + 1.
candidates :: Int -> Grid s -> ST s [Candidate]

-- | Formats a grid into a string. See <a>displayEntries</a> for a
--   convenience wrapper for common use-cases.
displayGrid :: Grid s -> ST s ByteString

-- | Returns a human-readable representation of the entries.
displayEntries :: [Entry] -> Either Conflict ByteString
instance GHC.Show.Show Bananagrams.Grid.Candidate
instance GHC.Classes.Ord Bananagrams.Grid.Candidate
instance GHC.Classes.Eq Bananagrams.Grid.Candidate
instance GHC.Show.Show Bananagrams.Grid.Conflict
instance GHC.Classes.Ord Bananagrams.Grid.Conflict
instance GHC.Classes.Eq Bananagrams.Grid.Conflict
instance GHC.Show.Show Bananagrams.Grid.Change
instance GHC.Show.Show Bananagrams.Grid.Entry
instance GHC.Classes.Ord Bananagrams.Grid.Entry
instance GHC.Classes.Eq Bananagrams.Grid.Entry
instance GHC.Show.Show Bananagrams.Grid.Direction
instance GHC.Enum.Bounded Bananagrams.Grid.Direction
instance GHC.Enum.Enum Bananagrams.Grid.Direction
instance GHC.Classes.Ord Bananagrams.Grid.Direction
instance GHC.Classes.Eq Bananagrams.Grid.Direction
instance GHC.Show.Show Bananagrams.Grid.Orientation
instance GHC.Enum.Bounded Bananagrams.Grid.Orientation
instance GHC.Enum.Enum Bananagrams.Grid.Orientation
instance GHC.Classes.Ord Bananagrams.Grid.Orientation
instance GHC.Classes.Eq Bananagrams.Grid.Orientation


-- | Logging utilities.
module Bananagrams.Log
type Message = WithSeverity Text
type Loggable = MonadLog Message
data Severity
Emergency :: Severity
Alert :: Severity
Critical :: Severity
Error :: Severity
Warning :: Severity
Notice :: Severity
Informational :: Severity
Debug :: Severity
newtype Shown a
Shown :: a -> Shown a
[shown] :: Shown a -> a
log0 :: Loggable m => Severity -> Text -> m ()
log1 :: (Buildable a, Loggable m) => Severity -> Format -> a -> m ()
logs :: (Params p, Loggable m) => Severity -> Format -> p -> m ()
type LoggableIO m = (MonadIO m, Loggable m)
liftST :: LoggableIO m => ST RealWorld a -> m a
loggingToStderr :: Severity -> LoggingT Message IO a -> IO a


-- | A simple Bananagrams solver.
--   
--   This module implements a heuristic for finding a valid Bananagrams
--   layout given a list of characters and valid words. Note that for
--   simplicity the heuristic only explores layouts where words in the same
--   direction are not adjacent, and therefore might fail to find a
--   solution even if one exists (this is however unlikely in realistic
--   examples).
module Bananagrams

-- | A bag of allowed words.
data Dictionary

-- | Generates a <a>Dictionary</a> from a list of words.
newDictionary :: [Text] -> Dictionary

-- | A convenience alias for the characters in hand (to be placed on the
--   grid).
type Hand = Multiset Char

-- | Solves a game, assembling the characters into valid words as a grid.
solve :: Severity -> Dictionary -> Hand -> IO (Maybe [Entry])
data Severity
Emergency :: Severity
Alert :: Severity
Critical :: Severity
Error :: Severity
Warning :: Severity
Notice :: Severity
Informational :: Severity
Debug :: Severity

-- | A word entry inside a grid.
data Entry
Entry :: !Text -> !Orientation -> !YX -> Entry
[entryText] :: Entry -> !Text
[entryOrientation] :: Entry -> !Orientation
[entryStart] :: Entry -> !YX

-- | An entry's orientation.
data Orientation
Horizontal :: Orientation
Vertical :: Orientation

-- | Returns a human-readable representation of the entries.
displayEntries :: [Entry] -> Either Conflict ByteString
