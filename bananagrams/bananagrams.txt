-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Bananagrams, a game
@package bananagrams
@version 0.0.1.0


-- | Bananagrams word selection
module Bananagrams.Dictionary
data Dictionary
newDictionary :: [Text] -> Dictionary
type Hand = Multiset Char

-- | Returns the best words to use first given the allowed characters.
firstWords :: Dictionary -> Hand -> [Text]
matchingWords :: Dictionary -> Hand -> Map Int Char -> [(Text, Int)]


-- | Bananagrams grid operations
module Bananagrams.Grid

-- | A Bananagrams grid!
data Grid s

-- | Generates a new grid of edge length <tt>2*n+1</tt>, centered around 0.
newGrid :: Int -> ST s (Grid s)

-- | A word entry inside a grid.
data Entry
Entry :: !Text -> !Orientation -> !YX -> Entry
[entryText] :: Entry -> !Text
[entryOrientation] :: Entry -> !Orientation
[entryStart] :: Entry -> !YX

-- | An entry's orientation.
data Orientation
Horizontal :: Orientation
Vertical :: Orientation
orientationYX :: Orientation -> YX
gridEntries :: Grid s -> ST s [Entry]

-- | A conflict when adding an entry.
data Conflict
Conflict :: !YX -> Char -> Char -> Conflict
[conflictYX] :: Conflict -> !YX
[conflictOldChar] :: Conflict -> Char
[conflictNewChar] :: Conflict -> Char

-- | Attempts to add a new entry to the grid. Note that this method does
--   *not* check that a word is valid. If the word is too long, this method
--   will <a>error</a>.
setEntry :: Entry -> Grid s -> ST s (Maybe Conflict)

-- | Removes the last added entry, or does nothing if the grid doesn't
--   contain any entries.
unsetLastEntry :: Grid s -> ST s (Maybe Entry)

-- | A candidate grid location.
data Candidate
Candidate :: !YX -> !Orientation -> !Map Int Char -> Candidate

-- | The candidate root coordinate, always already set in the grid.
[candidateYX] :: Candidate -> !YX

-- | The orientation of the new word.
[candidateOrientation] :: Candidate -> !Orientation

-- | All set characters in this candidate row or column, indexed from the
--   root.
[candidateChars] :: Candidate -> !Map Int Char

-- | Returns all candidate locations for adding new words to the grid. Note
--   that word expansions are not considered valid candidates (e.g.
--   <tt>T</tt> transforming <tt>CAT</tt> into <tt>CATS</tt> would not be
--   returned).
candidates :: Grid s -> ST s [Candidate]

-- | Returns a human-readable representation of the entries.
displayEntries :: [Entry] -> Either Conflict ByteString
instance GHC.Show.Show Bananagrams.Grid.Candidate
instance GHC.Classes.Ord Bananagrams.Grid.Candidate
instance GHC.Classes.Eq Bananagrams.Grid.Candidate
instance GHC.Show.Show Bananagrams.Grid.Entry
instance GHC.Classes.Ord Bananagrams.Grid.Entry
instance GHC.Classes.Eq Bananagrams.Grid.Entry
instance GHC.Show.Show Bananagrams.Grid.Direction
instance GHC.Enum.Bounded Bananagrams.Grid.Direction
instance GHC.Enum.Enum Bananagrams.Grid.Direction
instance GHC.Classes.Ord Bananagrams.Grid.Direction
instance GHC.Classes.Eq Bananagrams.Grid.Direction
instance GHC.Show.Show Bananagrams.Grid.Orientation
instance GHC.Enum.Bounded Bananagrams.Grid.Orientation
instance GHC.Enum.Enum Bananagrams.Grid.Orientation
instance GHC.Classes.Ord Bananagrams.Grid.Orientation
instance GHC.Classes.Eq Bananagrams.Grid.Orientation


-- | A simple Bananagrams solver.
--   
--   This module implements a heuristic for finding a valid Bananagrams
--   layout given a list of characters and valid words. Note that for
--   simplicity the heuristic only explores layouts where words in the same
--   direction are not adjacent, and therefore might fail to find a
--   solution even if one exists (this is however unlikely in realistic
--   examples).
module Bananagrams
solve :: Dictionary -> Multiset Char -> Maybe [Entry]
data Dictionary
newDictionary :: [Text] -> Dictionary

-- | A word entry inside a grid.
data Entry
Entry :: !Text -> !Orientation -> !YX -> Entry
[entryText] :: Entry -> !Text
[entryOrientation] :: Entry -> !Orientation
[entryStart] :: Entry -> !YX

-- | An entry's orientation.
data Orientation
Horizontal :: Orientation
Vertical :: Orientation

-- | Returns a human-readable representation of the entries.
displayEntries :: [Entry] -> Either Conflict ByteString
